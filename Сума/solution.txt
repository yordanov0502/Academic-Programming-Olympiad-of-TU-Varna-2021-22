#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <climits>
using namespace std;


bool foo(long long A[], int N, int M, long long MIDDLE_K) {

    long long maxSum = INT_MIN;
    long long currentSum = 0;
    long long temp;

    for (long long i = 0; i < N; i++)
    {
        temp = A[i];
        temp = temp + (i + 1) * MIDDLE_K;
        currentSum += temp;

        if (currentSum < 0) { currentSum = 0; }

        maxSum = max(maxSum, currentSum);
    }
   
    if (maxSum >= M) { return true; }

    else  { return false; }
}


int main() {
   
    int T;//broj testove
    cin >> T;//1-25

    for (int i = 0; i < T; i++)
    {
        int N;//broj 4isla v spisuka (1 - 10 000)
        int M;//minimalnata tursena suma (1 - 1 000 000 000)

        cin >> N >> M;

        long long* A = new long long[N]; //N na broj celi 4isla
        

        for (int i = 0; i < N; i++)
        {
            cin >> A[i];//(-1 000 000 do 1 000 000)
        }
      
        
        long long MIN_K = (LLONG_MIN + 1000000) / 10000;
        long long MAX_K = (LLONG_MAX - 1000000) / 10000;
        
        long long LEFT_K = MIN_K;
        long long RIGHT_K = MAX_K;

        long long MIDDLE_K = (LEFT_K + RIGHT_K - 1) / 2;
        
        long long answer = 0;


        while (LEFT_K < RIGHT_K)
        {

            MIDDLE_K = (LEFT_K + RIGHT_K - 1) / 2;

            if (foo(A, N, M, MIDDLE_K) == true) { RIGHT_K = MIDDLE_K; }

            //if (foo(A, N, M, MIDDLE_K) == false) { LEFT_K = MIDDLE_K + 1; }

            else { LEFT_K = MIDDLE_K+1 ; }
          
            if (LEFT_K == RIGHT_K) { answer = LEFT_K; }

        }
        cout<<answer<<endl;

    }
    return 0;
}